type 'a etree = Empty
              | Branch of 'a etree * 'a * 'a etree

let et1 = Branch (Branch (Empty, 3, Empty), 2, Empty)

let rec is_elem e t =
    match t with
    | Empty -> false
    | Branch (t1, e', t2) when e = e' -> true
    | Branch (t1, e', t2) when e < e' -> is elem e t1
    | Branch (t1, e', t2) when e > e' -> is elem e t2

let rec insert e t =
    match t with
    | Empty -> Branch (Empty, e, Empty)
    | Branch (t1, e', t2) when e = e' -> t
    | Branch (t1, e', t2) when e < e' -> Branch (insert e t1, e', t2)
    | Branch (t1, e', t2) when e > e' -> Branch (t1, e', insert e t2)


1.  The principle of induction for 'a etree is that
    P(t) holds for all 'a etree if P(Empty) holds and if P(t1) and P(t2) hold,
    then P(Branch(t1, e, t2)) holds for all e in 'a.

2.  We are asked to prove that for all e in 'a,
    P(t) = is_elem e (insert e t) holds.

3.  Base Case. t = Empty.
    Then consider for some e in 'a,
    P(Empty) = is_elem e (insert e Empty).
    = is_elem e (Branch (Empty, e, Empty))      By definition of insert.
    = true                                      By definition of is_elem.

4.  Inductive Hypothesis.
    Suppose that we have two 'a etrees t1 and t2 for which P(t1) and P(t2) holds.
    That is, for all e in 'a, is_elem e (insert e t1) and is_elem e (insert e t2)
    both hold.

5.  Inductive Step.
    Suppose our inductive hypothesis holds, then consider, for some e' in 'a,
    P(Branch (t1,e',t2)) = for all e in 'a,
    is_elem e (insert e (Branch (t1,e',t2)))
    There are three possible cases.

    Case 1. e = e'.
    is_elem e (insert e (Branch (t1,e',t2)))
    = is_elem e (Branch (t1,e',t2))             By definition of insert.
    = true                                      By definition of is_elem.

    Case 2. e < e'.
    is_elem e (insert e (Branch (t1,e',t2)))
    = is_elem e (Branch (insert e t1, e', t2))  By definition of insert.
    = is_elem e (insert e t1)                   By definition of is_elem.
    = true                                      By inductive hypothesis.

    Case 3. e > e'.
    is_elem e (insert e (Branch (t1,e',t2)))
    = is_elem e (Branch (t1, e', insert e t2))  By definition of insert.
    = is_elem e (insert e t2)                   By definition of is_elem.
    = true                                      By inductive hypothesis.

    So then in every case, the property holds, then by the inductive property
    for 'a etrees, the proptry holds for all 'a etree.
